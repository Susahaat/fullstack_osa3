{"version":3,"sources":["components/PersonForm.js","components/Filter.js","components/Persons.js","services/persons2.js","App.js","index.js"],"names":["PersonForm","props","onSubmit","addPerson","value","newName","onChange","handlePersonChange","newNumber","handleNumberChange","type","Filter","newFilter","handleFilterChange","Persons","peopleToShow","map","person","name","number","onClick","removePerson","id","baseUrl","axios","get","then","response","data","newObject","post","delete","put","App","useState","persons","setPersons","setNewName","setNewNumber","setNewFilter","confirmationMessage","setConfirmationMessage","errorMessage","setErrorMessage","useEffect","personService","personList","console","log","length","ErrorNotification","message","className","OkNotification","filter","people","toLowerCase","includes","event","target","preventDefault","names","personObject","window","confirm","updatePerson","find","setTimeout","newPerson","concat","catch","error","index","indexOf","splice","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cdbfe526.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst PersonForm = (props) => (\r\n  <form onSubmit={props.addPerson}>\r\n    <div>\r\n      name: <input value={props.newName} onChange={props.handlePersonChange} />\r\n    </div>\r\n    <div>\r\n      number:{\" \"}\r\n      <input value={props.newNumber} onChange={props.handleNumberChange} />\r\n    </div>\r\n    <div>\r\n      <button type=\"submit\">add</button>\r\n    </div>\r\n  </form>\r\n);\r\n\r\nexport default PersonForm;\r\n","import React from \"react\";\r\n\r\nconst Filter = (props) => (\r\n  <form>\r\n    <div>\r\n      filter shown with{\" \"}\r\n      <input value={props.newFilter} onChange={props.handleFilterChange} />\r\n    </div>\r\n  </form>\r\n);\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\n\r\nconst Persons = (props) => (\r\n  <div>\r\n    {props.peopleToShow.map((person) => {\r\n      return (\r\n        <div key={person.id}>\r\n          {person.name} {person.number}{\" \"}\r\n          <button onClick={() => props.removePerson(person.id)}>delete</button>\r\n        </div>\r\n      );\r\n    })}\r\n  </div>\r\n);\r\n\r\nexport default Persons;\r\n","import axios from \"axios\";\r\nconst baseUrl = \"/api/persons\";\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst remove = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nexport default {\r\n  getAll,\r\n  create,\r\n  remove,\r\n  update,\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport PersonForm from \"./components/PersonForm\";\nimport Filter from \"./components/Filter\";\nimport Persons from \"./components/Persons\";\nimport personService from \"./services/persons2\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [newFilter, setNewFilter] = useState(\"\");\n  const [confirmationMessage, setConfirmationMessage] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    personService.getAll().then((personList) => {\n      setPersons(personList);\n    });\n  }, []);\n  console.log(\"render\", persons.length, \"persons\");\n\n  const addPerson = (event) => {\n    event.preventDefault();\n    const names = persons.map((person) => person.name);\n    const personObject = {\n      name: newName,\n      number: newNumber,\n    };\n    if (names.includes(newName)) {\n      const accept = window.confirm(\n        `${newName} is already added to phonebook, replace the old number with a new one?`\n      );\n\n      if (accept) {\n        setNewName(\"\");\n        setNewNumber(\"\");\n        const updatePerson = persons.find((person) => person.name === newName);\n        personService.update(updatePerson.id, personObject);\n        setConfirmationMessage(\"Person updated\");\n        setTimeout(() => {\n          setConfirmationMessage(null);\n        }, 5000);\n      } else {\n        setConfirmationMessage(\"Did not update.\");\n        setTimeout(() => {\n          setConfirmationMessage(null);\n        }, 5000);\n      }\n    } else {\n      setNewName(\"\");\n      setNewNumber(\"\");\n      personService\n        .create(personObject)\n        .then((newPerson) => {\n          setPersons(persons.concat(newPerson));\n          setConfirmationMessage(`${newName} added`);\n          setTimeout(() => {\n            setConfirmationMessage(null);\n          }, 5000);\n        })\n        .catch((error) => {\n          setErrorMessage(`${error.response.data.error}`);\n          setTimeout(() => {\n            setErrorMessage(null);\n          }, 5000);\n        });\n    }\n  };\n\n  const removePerson = (person) => {\n    const accept = window.confirm(`Do you want to delete this person?`);\n    if (accept) {\n      personService.remove(person);\n      const index = persons.indexOf(person);\n      persons.splice(index, 1);\n      setPersons(persons);\n      setConfirmationMessage(`Person deleted.`);\n      setTimeout(() => {\n        setConfirmationMessage(null);\n      }, 5000);\n    }\n  };\n\n  const ErrorNotification = ({ message }) => {\n    if (message === null) {\n      return null;\n    }\n\n    return <div className=\"error\">{message}</div>;\n  };\n\n  const OkNotification = ({ message }) => {\n    if (message === null) {\n      return null;\n    }\n\n    return <div className=\"confirmation\">{message}</div>;\n  };\n\n  const peopleToShow = persons.filter((people) => {\n    return people.name.toLowerCase().includes(newFilter.toLowerCase());\n  });\n\n  const handlePersonChange = (event) => {\n    console.log(event.target.value);\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value);\n  };\n\n  const handleFilterChange = (event) => {\n    setNewFilter(event.target.value);\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <OkNotification message={confirmationMessage} />\n      <ErrorNotification message={errorMessage} />\n      <Filter newFilter={newFilter} handleFilterChange={handleFilterChange} />\n      <h2>Add new</h2>\n      <PersonForm\n        addPerson={addPerson}\n        handleNumberChange={handleNumberChange}\n        handlePersonChange={handlePersonChange}\n        newName={newName}\n        newNumber={newNumber}\n      />\n      <h2>Numbers</h2>\n      <Persons peopleToShow={peopleToShow} removePerson={removePerson} />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}